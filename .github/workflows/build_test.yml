#
# Copyright (c) 2019-2020 P3TERX <https://p3terx.com>
#
# This is free software, licensed under the MIT License.
# See /LICENSE for more information.
#
# https://github.com/P3TERX/Actions-OpenWrt
# Description: Build OpenWrt using GitHub Actions
#

name: Build Test

on:
  repository_dispatch:
  workflow_dispatch:
    # push:
    inputs:
      tailscaleBranch:
        description: '选择tailscale分支'
        required: true
        default: 'master'
        type: choice
        options:
        - master
        - openwrt-23.05
        - none
      UPLOAD_BIN_DIR:
        description: '上传bin文件夹'
        default: false
        required: true
        type: boolean
      UPLOAD_FIRMWARE:
        description: '上传固件'
        default: false
        required: true
        type: boolean
      USE_CACHE:
        description: '使用缓存'
        default: false
        required: true
        type: boolean
      COMPILE:
        description: '是否编译'
        default: true
        required: true
        type: boolean
          
env:
  REPO_URL: https://github.com/hanwckf/immortalwrt-mt798x.git
  REPO_BRANCH: openwrt-21.02
  FEEDS_CONF: feeds.conf.default
  CONFIG_FILE: .config
  DIY_P1_SH: diy-part1.sh
  DIY_P2_SH: diy-part2.sh
  TZ: Asia/Shanghai

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@main

    - name: test
      if: ${{ inputs.COMPILE }}
      run: |
        echo "${{ toJson(inputs) }}"
        echo "test step"

    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        echo "${{ toJson(inputs) }}"

        sudo -E apt-get -qq install build-essential clang flex bison g++ gawk \
        gcc-multilib g++-multilib gettext git libncurses-dev libssl-dev \
        python3-distutils rsync unzip zlib1g-dev file wget
        sudo -E apt-get -qq autoremove --purge
        sudo -E apt-get -qq clean
        sudo timedatectl set-timezone "$TZ"
        sudo mkdir -p /workdir
        sudo chown $USER:$GROUPS /workdir

    - name: Clone source code
      working-directory: /workdir
      run: |
        df -hT $PWD
        git clone $REPO_URL -b $REPO_BRANCH openwrt
        ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt

    - name: Load custom feeds
      run: |
        [ -e $FEEDS_CONF ] && mv $FEEDS_CONF openwrt/feeds.conf.default
        chmod +x $DIY_P1_SH
        cd openwrt
        $GITHUB_WORKSPACE/$DIY_P1_SH

    - name: Update feeds
      run: cd openwrt && ./scripts/feeds update -a

    - name: Update Tailsclae
      if:  ${{ inputs.tailscaleBranch }}!= 'none'
      run: |
        # git clone -b master https://github.com/immortalwrt/packages.git
        # git clone -b openwrt-23.05 https://github.com/immortalwrt/packages.git
        git clone -b ${{ inputs.tailscaleBranch }} https://github.com/immortalwrt/packages.git
        rm -rf openwrt/feeds/packages/net/tailscale
        cp -r packages/net/tailscale openwrt/feeds/packages/net/tailscale

        mv -f tailscale/Makefile openwrt/feeds/packages/net/tailscale/Makefile
        
        grep PKG_VERSION:= openwrt/feeds/packages/net/tailscale/Makefile |awk -F ':=' '{print $2}' > TAILSCALE_VERSION
        echo "TAILSCALE_VERSION=$(cat TAILSCALE_VERSION)" >> $GITHUB_ENV

        sed -i '$ s/nftables/iptables/' openwrt/feeds/packages/net/tailscale/files/tailscale.conf

        rm -rf openwrt/feeds/packages/lang/golang
        cp -r packages/lang/golang openwrt/feeds/packages/lang/golang

    - name: Install feeds
      run: cd openwrt && ./scripts/feeds install -a

    - name: Load custom configuration
      run: |
        [ -e files ] && mv files openwrt/files
        [ -e $CONFIG_FILE ] && mv $CONFIG_FILE openwrt/.config
        chmod +x $DIY_P2_SH
        cd openwrt
        $GITHUB_WORKSPACE/$DIY_P2_SH

    - name: Download package
      id: package
      run: |
        cd openwrt
        make defconfig
        make download -j8
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;

    - name: Compile the firmware
      id: compile
      if: ${{ inputs.COMPILE }} && !cancelled()
      run: |
        cd openwrt
        echo -e "$(nproc) thread compile"
        make -j$(nproc) || make -j1 || make -j1 V=s
        echo "status=success" >> $GITHUB_OUTPUT
        grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
        [ -s DEVICE_NAME ] && echo "DEVICE_NAME=_$(cat DEVICE_NAME)" >> $GITHUB_ENV
        echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV

    - name: Check space usage
      if: (!cancelled())
      run: df -hT

    - name: Upload tailscale ipk
      uses: actions/upload-artifact@main
      if: steps.compile.outputs.status == 'success' && ${{ inputs.tailscaleBranch }}!= 'none'
      with:
        name: tailscale_${{ env.TAILSCALE_VERSION }}_ipk 
        path: openwrt/bin/packages/aarch64_cortex-a53/packages/tailscale*.ipk

    - name: Upload bin directory
      uses: actions/upload-artifact@main
      if: steps.compile.outputs.status == 'success' && ${{ inputs.UPLOAD_BIN_DIR }}
      with:
        name: OpenWrt_bin${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: openwrt/bin

    - name: Organize files
      id: organize
      if: ${{ inputs.UPLOAD_FIRMWARE }} && !cancelled()
      run: |
        cd openwrt/bin/targets/*/*
        rm -rf packages
        echo "FIRMWARE=$PWD" >> $GITHUB_ENV
        echo "status=success" >> $GITHUB_OUTPUT

    - name: Upload firmware directory
      uses: actions/upload-artifact@main
      if: steps.organize.outputs.status == 'success' && !cancelled()
      with:
        name: OpenWrt_firmware${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: ${{ env.FIRMWARE }}

    - name: Clean Compile
      id: clean-compile
      run: |
        cd openwrt
        make clean

    - name: Cache Compile
      id: cache-compile
      uses: actions/cache/save@v4
      if: steps.compile.outputs.status == 'success'
      with:
        path: openwrt
        key: ${{ runner.os }}-openwrt-${{ hashFiles('openwrt/feeds.conf.default') }}

    - name: Delete workflow runs
      uses: Mattraks/delete-workflow-runs@v2
      with:
        token: ${{ github.token }}
        repository: ${{ github.repository }}
        retain_days: 7
        keep_minimum_runs: 3

    - name: action-bark
      uses: harryzcy/action-bark@v2.0.3
      if: ${{ !cancelled() }}
      with:
        status: ${{ job.status }}
        device_key: ${{ secrets.BARK_DEVICE_KEY }}
        bark_server_url: ${{ secrets.BARK_SERVER_URL }}
