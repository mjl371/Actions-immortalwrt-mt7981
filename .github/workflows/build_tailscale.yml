name: Build Tailscale
on:
  # push:
  workflow_dispatch:
    inputs:
      tailscaleVersion:
        description: 'tailscale版本'
        required: false
        default: 'latest'
        type: input
      sdkURL:
        description: 'sdk地址'
        required: true
        default: 'https://github.com/mjl371/Actions-immortalwrt-mt7981/releases/download/sdk/immortalwrt-sdk-mediatek-mt7981_gcc-8.4.0_musl.Linux-x86_64.tar.xz'
        type: input
      networkType:
        description: '是否iptables'
        required: false
        default: 'iptables'
        type: choice
        options:
        - nftables
        - iptables
      UPLOAD_TRANSFER:
        description: '上传'
        default: false
        required: true
        type: boolean
          
env:
  TZ: Asia/Shanghai

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@main

    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        echo "${{ toJson(inputs) }}"
        sudo -E apt-get -qq install build-essential clang flex bison g++ gawk \
        gcc-multilib g++-multilib gettext git libncurses-dev libssl-dev \
        python3-distutils rsync unzip zlib1g-dev file wget jq
        sudo -E apt-get -qq autoremove --purge
        sudo -E apt-get -qq clean
        sudo timedatectl set-timezone "$TZ"
        sudo mkdir -p /workdir
        sudo chown $USER:$GROUPS /workdir

    - name: Use Sdk
      working-directory: /workdir
      run: |
        wget "${{ inputs.sdkURL }}"
        tar -xf *.tar.xz 
        mv $(basename "${{ inputs.sdkURL }}"| sed 's/.\{7\}$//' ) openwrt
        ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt
        
    - name: Update feeds
      run: |
        cd openwrt 
        sed -i '3,5d' feeds.conf.default
        ./scripts/feeds update -a

    - name: Update Tailscale feeds
      run: |
        git clone -b master https://github.com/immortalwrt/packages.git
  
        rm -rf openwrt/feeds/packages/lang/golang
        cp -r packages/lang/golang openwrt/feeds/packages/lang/golang
        rm -rf openwrt/feeds/packages/net/tailscale
        cp -r packages/net/tailscale openwrt/feeds/packages/net/tailscale

        packagesVersion=$(grep PKG_VERSION:= openwrt/feeds/packages/net/tailscale/Makefile |awk -F ':=' '{print $2}')
        echo "packagesVersion:$packagesVersion"
        
    - name: Choose Tailscale verison
      run: |
        newVersion=$(curl -s https://api.github.com/repos/tailscale/tailscale/releases |jq -r '.[0].tag_name' |sed 's/v//')
        echo "newVersion:$newVersion"
        latestVersion=$(curl -s https://api.github.com/repos/tailscale/tailscale/releases/latest |jq -r '.tag_name' |sed 's/v//')
        echo "latestVersion:$latestVersion"

        echo "inputVersion:${{ inputs.tailscaleVersion }}"
        
        if [ "${{ inputs.tailscaleVersion }}" = "latest" ]; then
            compileVersion=$latestVersion
        elif [ "${{ inputs.tailscaleVersion }}" = "packages" ]; then
            compileVersion=$packagesVersion
        else
            compileVersion=$(echo "${{ inputs.tailscaleVersion }}"|sed 's/v//')
        fi

        echo "compileVersion:$compileVersion"
        echo "TAILSCALE_VERSION=$compileVersion" >> $GITHUB_ENV
        
        wget -O tailscale.tar.gz  "https://codeload.github.com/tailscale/tailscale/tar.gz/v$compileVersion"
        pkgHash=$(sha256sum tailscale.tar.gz |awk '{print $1}')
        echo "pkgHash:$pkgHash"
        sed -i "s/PKG_VERSION:=.*/PKG_VERSION:=$compileVersion/" openwrt/feeds/packages/net/tailscale/Makefile
        sed -i "s/PKG_HASH:=.*/PKG_HASH:=$pkgHash/" openwrt/feeds/packages/net/tailscale/Makefile
        cat openwrt/feeds/packages/net/tailscale/Makefile

    - name: Choose network type
      if: ${{ inputs.networkType == 'iptables' }}
      run:  sed -i '$ s/nftables/iptables/' openwrt/feeds/packages/net/tailscale/files/tailscale.conf
      
    - name: Install feeds
      run: cd openwrt && ./scripts/feeds install -a
        
    - name: Compile the firmware
      id: compile
      if: ${{ !cancelled() }} 
      run: |
        cd openwrt
        make defconfig
        echo -e "$(nproc) thread compile"
        make package/tailscale/compile V=s -j$(nproc)

        echo "status=success" >> $GITHUB_OUTPUT
        echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV

    - name: Get tailscale ipk name
      if: steps.compile.outputs.status == 'success' 
      run: |
        ipkName=$(find openwrt/bin/packages/*/packages/ -name "*.ipk"  -exec basename {} \; |sed 's/\.[^.]*$//')
        echo "FILE_NAME=$ipkName" >> $GITHUB_ENV
      
    - name: Upload tailscale ipk
      uses: actions/upload-artifact@main
      if: steps.compile.outputs.status == 'success' 
      with:
        name: ${{ env.FILE_NAME }}_${{ inputs.networkType}}
        path: openwrt/bin/packages/*/packages/tailscale*.ipk

    - name: File Transfer
      id: Transfer
      if: steps.compile.outputs.status == 'success' && ${{ inputs.UPLOAD_TRANSFER == 'true' }} && !cancelled()
      run: |
        curl -fsSL git.io/file-transfer | sh
        ./transfer lit --no-progress $(find openwrt/bin/packages/ -name "tailscale*.ipk") 2>&1 | tee transfer.log
        
        downloadUrl=$(cat transfer.log | grep https | cut -f3 -d" ")

        echo "::notice file=download::$(cat transfer.log | grep https)"
        echo "::notice file=install::wget -O taiscale${{ env.TAILSCALE_VERSION }}.ipk $downloadUrl && opkg install taiscale${{ env.TAILSCALE_VERSION }}.ipk"

    - name: action-bark
      uses: harryzcy/action-bark@v2.0.3
      if: ${{ !cancelled() }}
      with:
        status: ${{ job.status }}
        device_key: ${{ secrets.BARK_DEVICE_KEY }}
        bark_server_url: ${{ secrets.BARK_SERVER_URL }}

    - name: Delete workflow runs
      uses: Mattraks/delete-workflow-runs@v2
      with:
        token: ${{ github.token }}
        repository: ${{ github.repository }}
        retain_days: 7
        keep_minimum_runs: 3
